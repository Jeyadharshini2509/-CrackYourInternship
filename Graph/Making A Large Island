class Solution {
    int ans=0;
    int[] xes = new int[]{-1, 0 , 0, 1};
    int[] yes = new int[]{0, -1, 1, 0};

    public int largestIsland(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        DSU dsu = new DSU(m*n);

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]!=0) dfs(grid, dsu, i, j);
            }
        }

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==0){
                    int sum=1;
                    int key = i*grid[0].length + j;
                    HashSet<Integer> hset = new HashSet<>();
                    for(int k=0;k<4;k++){
                        int newx = i+xes[k];
                        int newy = j+yes[k];
                        if(newx<0 || newx>=grid.length || newy<0 || 
                        newy>=grid[0].length || grid[newx][newy]==0)
                            continue;

                        int newkey = newx*grid[0].length+newy;
                        hset.add(dsu.find(newkey));
                    }
                    for(int k : hset){
                        sum += dsu.rank[k];
                    }
                    ans = Math.max(ans, sum);
                }
            }
        }

        for(int i=0;i<dsu.rank.length;i++){
            ans=Math.max(ans, dsu.rank[i]);
        }

        return ans;
    }
     public void dfs(int[][] grid, DSU dsu, int x, int y){
        int key = x*grid[0].length + y;

        for(int i=0;i<4;i++){
            int newx = x+xes[i];
            int newy = y+yes[i];

            if(newx<0 || newx>=grid.length || newy<0 || newy>=grid[0].length || grid[newx][newy]==0)
                continue;

            int newkey = newx*grid[0].length+newy;
            if(dsu.find(key) != dsu.find(newkey)){
                dsu.union(key, newkey);
                dfs(grid, dsu, newx, newy);
            }
        }
    }
}
 class DSU{
        int[] rank;
        int[] parent;

        DSU(int v){
            rank = new int[v];
            parent = new int[v];

            for(int i=0;i<v;i++){
                parent[i] = i;
                rank[i] = 1;
            } 
        }

        public int find(int a){
            if(parent[a]!=a){
                parent[a] = find(parent[a]);
            }
            return parent[a];
        }

        public void union(int a, int b){
            int pa = find(a), pb = find(b);
            if (pa != pb) {
                if (rank[pa] < rank[pb]) {
                    parent[pa] = pb;
                    rank[pb] += rank[pa];
                } else {
                    parent[pb] = pa;
                    rank[pa] += rank[pb];
                }
            }
        }
    }

