class Solution {
   public int numOfMinutes(int n, int headID, int[] manager, int[] informTime) {
    final int[] minStep = new int[n];
    Arrays.fill(minStep, Integer.MAX_VALUE);
    final Map<Integer, List<Integer>> map = new HashMap<>();

    for(int i = 0; i < n; i++) {
        if(manager[i] == -1) continue;
        map.putIfAbsent(manager[i], new ArrayList<>());
        map.get(manager[i]).add(i);
    }
    final Queue<int[]> queue = new LinkedList<>();
    queue.offer(new int[]{headID, 0});
    minStep[headID] = 0;
    int result = 0;
    while(!queue.isEmpty()) {
        final int size = queue.size();
        for(int i = 0; i < size; i++) {
            final int[] c = queue.poll();
            final int employeeId = c[0];
            final int currentMinutes = c[1];

            final List<Integer> next = map.get(employeeId);
            if(next == null) continue;
            final int notifyMinutes = informTime[employeeId];
            for(int e: next) {
                if(currentMinutes + notifyMinutes < minStep[e]) {
                    minStep[e] = currentMinutes + notifyMinutes;
                    queue.offer(new int[]{e, minStep[e]});
                }
            }
        }
    }

    for(int e: minStep) {
        result = Math.max(result, e);
    }

    return result;
}
}
