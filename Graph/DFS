
class Solution {
    private void dfs(int ch,boolean[] vis, ArrayList<Integer> ans, ArrayList<ArrayList<Integer>> adj){
        vis[ch]=true;
        ans.add(ch);
        for(int i=0;i<adj.get(ch).size();i++){
            if(!vis[adj.get(ch).get(i)]){
                dfs(adj.get(ch).get(i),vis,ans,adj);
            }
        }
    }
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] vis=new boolean[V];
        ArrayList<Integer> ans= new ArrayList<>();
        dfs(0,vis,ans,adj);
        return ans;
        // Code here
    }
   
}
